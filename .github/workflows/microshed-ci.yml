name: MicroShed CI

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to build'
        required: true
      prioritized-jobs:
        description: 'An array of comma-separated list of test jobs to prioritize running first'
      java-version:
        description: 'The version of Java to use for tests. Possible values: 8, 11, 15'
      os:
        description: 'The operating system to run tests on. Possible values: ubuntu-latest, windows-latest, macos-latest'
  pull_request:
    branches: 
    - master
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - '.gitignore'
      - '.dockerignore'
      - '*.md'
      - '*.adoc'
      - '*.txt'
      - '.github/ISSUE_TEMPLATE/**'

env:
  LANG: en_US
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Java
      uses: joschi/setup-jdk@v2
      with:
        java-version: 11
        openjdk_impl: openj9
    - name: Apply repository caches
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches/modules-2
          !~/.gradle/caches/modules-2/org.microshed*
          ~/.gradle/wrapper
          ~/.m2/repository/
          !~/.m2/repository/org/microshed/
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Build with Gradle
      run: |
        chmod +x gradlew
        ./gradlew assemble testClasses
  integration_tests:
    name: Tests - ${{matrix.category}}
    defaults:
      github.event.inputs.os: ubuntu-latest
      github.event.inputs.java-version: 11
      github.event.inputs.prioritized-jobs: '[ ]'
    runs-on: ${{ github.event.inputs.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      max-parallel: 18
      matrix:
        category: ${{ github.event.inputs.prioritized-jobs }}
        include:
          - category: JAXRS
            projects: >
              jaxrs-json
              jaxrs-basicauth
              jaxrs-mpjwt
              everything-app
          - category: GENERAL
            projects: >
              maven-app
              everything-app
              jdbc-app
              kafka-app
          - category: LIBERTY/PAYARA
            projects: >
              liberty-app
              payara-app
          - category: QUARKUS/WILDFLY
            projects: >
              quarkus-app
              wildfly-app
    steps:
    - uses: actions/checkout@v2
    - name: Set up Java
      uses: joschi/setup-jdk@v2
      with:
        java-version: ${{ github.event.inputs.java-version }}
        openjdk_impl: openj9
    - uses: testspace-com/setup-testspace@v1
      with:
        domain: ${{ github.repository_owner }}
    - name: Apply repository caches
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches/modules-2
          !~/.gradle/caches/modules-2/org.microshed*
          ~/.gradle/wrapper
          ~/.m2/repository/
          !~/.m2/repository/org/microshed/
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Run integration tests
      shell: bash
      env:
        TEST_PROJECTS: ${{matrix.projects}}
        CATEGORY: ${{matrix.category}}
      run: |
        chmod +x gradlew
        echo "org.gradle.daemon=false" >> gradle.properties
        
        echo "Will be running projects $TEST_PROJECTS"
        for TEST_PROJECT in $TEST_PROJECTS
        do
          if [[ ! -d "sample-apps/$TEST_PROJECT" ]]; then
            echo "::error::Test project $TEST_PROJECT does not exist.";
            exit 1;
          fi
        done
        
        for TEST_PROJECT in $TEST_PROJECTS
        do
          echo "### BEGIN running test project $TEST_PROJECT"
          ./gradlew :microshed-testing-$TEST_PROJECT:test
          echo "### END running test project $TEST_PROJECT";
        done
        
        echo "Done running all tests."
    - name: Upload test results
      if: always()
      run: |
        testspace [${{matrix.category}}]sample-apps/*/build/test-results/**/*.xml
