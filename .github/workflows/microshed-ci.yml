name: MicroShed CI

on:
  pull_request:
    branches: 
    - master
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - '.gitignore'
      - '.dockerignore'
      - '*.md'
      - '*.adoc'
      - '*.txt'
      - '.github/ISSUE_TEMPLATE/**'

env:
  LANG: en_US.UTF-8
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
    - name: Set up Java
      uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2 # v3.11.0
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
    - name: Build with Gradle
      run: |
        chmod +x gradlew
        ./gradlew assemble testClasses
  integration_tests:
    name: Tests - ${{matrix.category}}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      max-parallel: 18
      matrix:
        include:
          - category: RESTFUL
            projects: >
              jaxrs-json
              jaxrs-basicauth
              jaxrs-mpjwt
              everything-app
          - category: GENERAL
            projects: >
              maven-app
              everything-app
              jdbc-app
              kafka-app
          - category: LIBERTY/PAYARA
            projects: >
              liberty-app
              payara-app
          - category: QUARKUS/WILDFLY
            projects: >
              quarkus-app
              wildfly-app
    steps:
    - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
    - name: Set up Java
      uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2 # v3.11.0
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
    - uses: testspace-com/setup-testspace@ee1482f978eb5010ec27b6f6372904f01f2edd68 # v1.0.6
      with:
        domain: ${{ github.repository_owner }}
    - name: Run integration tests
      shell: bash
      env:
        TEST_PROJECTS: ${{matrix.projects}}
        CATEGORY: ${{matrix.category}}
      run: |
        chmod +x gradlew
        echo "org.gradle.daemon=false" >> gradle.properties
        
        echo "Will be running projects $TEST_PROJECTS"
        for TEST_PROJECT in $TEST_PROJECTS
        do
          if [[ ! -d "sample-apps/$TEST_PROJECT" ]]; then
            echo "::error::Test project $TEST_PROJECT does not exist.";
            exit 1;
          fi
        done
        
        for TEST_PROJECT in $TEST_PROJECTS
        do
          echo "### BEGIN running test project $TEST_PROJECT"
          ./gradlew :microshed-testing-$TEST_PROJECT:test
          echo "### END running test project $TEST_PROJECT";
        done
        
        echo "Done running all tests."
    - name: Upload test results
      if: always()
      run: |
        testspace [${{matrix.category}}]sample-apps/*/build/test-results/**/*.xml
