name: MicroShed CI
# temp2
on:
  push:
    branches:
    - actions-temp
  pull_request:
    branches: 
    - master
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - '.gitignore'
      - '.dockerignore'
      - '*.md'
      - '*.adoc'
      - '*.txt'
      - '.github/ISSUE_TEMPLATE/**'

env:
  LANG: en_US.UTF-8
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.gen-params.outputs.test-matrix }}
      test-os: ${{ steps.gen-params.outputs.test-os }}
      test-java: ${{ steps.gen-params.outputs.test-java }}
    steps:
    - uses: actions/checkout@v2
    - name: Dump event json
      run: |
        echo "Dumping event json"
        cat $GITHUB_EVENT_PATH
    - name: Set up Java
      uses: joschi/setup-jdk@v2
      with:
        java-version: 11
        openjdk_impl: openj9
    - name: Generate output
      id: gen-params
      run: |
        echo "::set-output name=test-os::ubuntu-latest"
        echo "::set-output name=test-java::11"

        cat > .github/pull_request_body.txt << END_OF_PR_BODY
        ${{ github.event.pull_request.body }}
        END_OF_PR_BODY
        echo "PR Summary is:"
        cat .github/pull_request_body.txt
        
        MATRIX_RESULT=$(java .github/GenerateCategories.java .github/pull_request_body.txt)
        echo "MATRIX_RESULT is $MATRIX_RESULT"
        echo "::set-output name=test-matrix::$MATRIX_RESULT"
  integration_tests:
    needs: build
    name: Tests - ${{matrix.category}}
    runs-on: ${{ needs.build.outputs.test-os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      max-parallel: 18
      matrix: ${{fromJson(needs.build.outputs.test-matrix)}}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Java
      uses: joschi/setup-jdk@v2
      with:
        java-version: ${{ needs.build.outputs.test-java }}
        openjdk_impl: openj9
    - uses: testspace-com/setup-testspace@v1
      with:
        domain: ${{ github.repository_owner }}
    - name: Apply repository caches
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches/modules-2
          !~/.gradle/caches/modules-2/org.microshed*
          ~/.gradle/wrapper
          ~/.m2/repository/
          !~/.m2/repository/org/microshed/
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Run integration tests
      shell: bash
      env:
        CATEGORY: ${{matrix.category}}
      run: |
        chmod +x gradlew
        echo "org.gradle.daemon=false" >> gradle.properties
        
        TEST_PROJECTS=$(cat .github/test-categories/$CATEGORY)
        echo "Will be running projects $TEST_PROJECTS"
        for TEST_PROJECT in $TEST_PROJECTS
        do
          if [[ ! -d "sample-apps/$TEST_PROJECT" ]]; then
            echo "::error::Test project $TEST_PROJECT does not exist.";
            exit 1;
          fi
        done
        
        for TEST_PROJECT in $TEST_PROJECTS
        do
          echo "### BEGIN running test project $TEST_PROJECT"
          ./gradlew :microshed-testing-$TEST_PROJECT:test
          echo "### END running test project $TEST_PROJECT";
        done
        
        echo "Done running all tests."
    - name: Upload test results
      if: always()
      run: |
        testspace [${{matrix.category}}]sample-apps/*/build/test-results/**/*.xml
