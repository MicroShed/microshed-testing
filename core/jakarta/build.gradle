// This is a mock project that takes the core artifact and transforms it to use the Jakarta EE namespace

ext.title = "MicroShed Testing Framework"
description="A test framework for black-box testing MicroProfile and Jakarta EE applications"

configurations {
  transformer
  parent {extendsFrom compile}
}

dependencies {
  compile 'org.junit.jupiter:junit-jupiter-api:5.10.1'

  implementation 'org.eclipse:yasson:2.0.4'
  implementation 'org.eclipse.parsson:parsson:1.0.5'

  implementation 'cglib:cglib-nodep:3.3.0'
  implementation 'org.apache.cxf:cxf-rt-rs-client:4.0.3'
  implementation 'org.apache.cxf:cxf-rt-rs-extension-providers:4.0.3'
  implementation 'org.bitbucket.b_c:jose4j:0.7.2'

  testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'

  transformer 'org.eclipse.transformer:org.eclipse.transformer.cli:0.5.0'

  parent project(':microshed-testing-core')
}

ext.parent_jar = configurations.parent.find{
    it.name.startsWith("microshed-testing-core")
}
ext.transformed_jar = new File(projectDir, 'build/tmp/transformed/' + parent_jar.getName().replace('core', 'core-jakarta'))

//Deletes previously transformed jar otherwise transformer will produce an error
task cleanupTransform() {
    if(transformed_jar.exists()) {
        transformed_jar.delete()
    }
}

//Creates the transformed archive in the build/tmp/transformed/ directory
task transform(type: JavaExec) {
    dependsOn cleanupTransform
    classpath = configurations.transformer
    main = 'org.eclipse.transformer.cli.JakartaTransformerCLI'
    args parent_jar, transformed_jar
}

//Creates an empty jar file in the build/libs directory
//since there are no source files
jar.dependsOn transform

//Overwrites the empty jar with the transformed jar in the build/libs directory
task overwrite(type: Copy) {
    from(transformed_jar)
    into('build/libs')
}

jar.finalizedBy overwrite

apply from: publishScript

publishToMavenLocal.dependsOn ':microshed-testing-core:publishToMavenLocal'

