ext.title = "MicroShed Testing Framework :: Testcontainers extension"
description = "Extensions for using MicroShed Testing with Testcontainers for managing application and resource lifecycle"

configurations {
    intTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output + configurations.intTestImplementation
        runtimeClasspath += output + compileClasspath + configurations.intTestRuntimeOnly
    }
}

dependencies {
  api platform(libs.junit.bom)
  api libs.junit.jupiter.api

  api platform(libs.tc.bom)
  api libs.tc.junit.jupiter

  api project(':microshed-testing-core')
  
  //Unit + Integration testing
  testImplementation platform(libs.slf4j.bom)
  testImplementation libs.slf4j.log4j
  testImplementation libs.mp.rest.client.api
  testImplementation libs.tc.mockserver
  
  //Unit testing
  testImplementation libs.bundles.junit.impl
  testRuntimeOnly    libs.bundles.junit.runtime
}

test {
  // These system properties will trigger hollow mode to be triggered during unit tests
  systemProperty "microshed_hostname", "localhost"
  systemProperty "microshed_http_port", "9080"
}

apply from: publishScript

publishToMavenLocal.dependsOn ':microshed-testing-core:publishToMavenLocal'

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    defaultCharacterEncoding = "UTF-8"
    useJUnitPlatform()
    testLogging {
        displayGranularity 1
        showStandardStreams = true
        showStackTraces = true
        exceptionFormat = 'full'
        events 'PASSED', 'FAILED', 'SKIPPED'
    }

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn integrationTest
