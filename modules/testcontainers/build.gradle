ext.title = "MicroShed Testing Framework :: Testcontainers extension"
description = "Extensions for using MicroShed Testing with Testcontainers for managing application and resource lifecycle"

configurations {
    intTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output + configurations.intTestImplementation
        runtimeClasspath += output + compileClasspath + configurations.intTestRuntimeOnly
    }
}

dependencies {
  api 'org.junit.jupiter:junit-jupiter-api:5.11.0'
  api 'org.testcontainers:junit-jupiter:1.20.1'
  api project(':microshed-testing-core')
  
  //Unit + Integration testing
  testImplementation 'org.eclipse.microprofile.rest.client:microprofile-rest-client-api:3.0.1'

  testImplementation 'org.slf4j:slf4j-log4j12:2.0.16'
  testImplementation 'org.testcontainers:mockserver:1.20.1'
  
  testImplementation 'org.junit.jupiter:junit-jupiter:5.11.0'
}

test {
  // These system properties will trigger hollow mode to be triggered during unit tests
  systemProperty "microshed_hostname", "localhost"
  systemProperty "microshed_http_port", "9080"
}

apply from: publishScript

publishToMavenLocal.dependsOn ':microshed-testing-core:publishToMavenLocal'

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    defaultCharacterEncoding = "UTF-8"
    useJUnitPlatform()
    testLogging {
        displayGranularity 1
        showStandardStreams = true
        showStackTraces = true
        exceptionFormat = 'full'
        events 'PASSED', 'FAILED', 'SKIPPED'
    }

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn integrationTest
