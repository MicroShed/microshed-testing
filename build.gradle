plugins {
    // to check for updates run: ./gradlew dependencyUpdates -Drevision=release
    id 'com.github.ben-manes.versions' version '0.27.0'
}

// some stuff
ext.currentVersion = '0.8.1-SNAPSHOT'
ext.lastRelease = '0.8'

subprojects {
    apply plugin: 'java'
    
    ext.publishScript = rootProject.rootDir.absolutePath + '/publish.gradle'

    group = 'org.microshed'
    version = currentVersion
    
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    compileJava.options.encoding = 'UTF-8'

    repositories {
        mavenCentral()
    }

    javadoc {
        exclude '**/internal/**'
    }

    test {
        defaultCharacterEncoding = "UTF-8"
        useJUnitPlatform()
        testLogging {
            displayGranularity 1
            showStandardStreams = true
            showStackTraces = true
            exceptionFormat = 'full'
            events 'PASSED', 'FAILED', 'SKIPPED'
        }
    }
}

task updateVersion {
    doLast {
        if (!project.hasProperty('nextVersion'))
            throw new GradleException("Must define '-PnextVersion=X.Y.Z' when running this task")
        def isRelease = !nextVersion.endsWith('SNAPSHOT')

        println 'Updating project version: ' + currentVersion + ' --> ' + nextVersion
        ant.replaceregexp(match: '(["\'>])' + currentVersion + '(["\'<])',
                        replace: '\\1' + nextVersion + '\\2', flags: 'g', byline: true) {
            fileset(dir: '.', includes: '**/*.gradle')
            fileset(dir: '.', includes: '**/pom.xml')
        }

        if (isRelease) {
            println 'Updating doc version: ' + lastRelease + ' --> ' + nextVersion
            ant.replaceregexp(match: '(["\'>])' + lastRelease + '(["\'<])',
                            replace: '\\1' + nextVersion + '\\2', flags: 'g', byline: true) {
                fileset(dir: '.', includes: '**/*.md')
                fileset(dir: '.', includes: 'build.gradle')
            }
        } else {
            // For non-release updates need to revert ext.lastRelease to a release version
            ant.replaceregexp(match: "ext\\.lastRelease = '" + nextVersion + "'",
                            replace: "ext\\.lastRelease = '" + lastRelease + "'", flags: 'g', byline: true) {
                fileset(dir: '.', includes: 'build.gradle')
            }
        }
    }
}
